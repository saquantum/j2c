bool isValidOverrideReturnType(methodST* st1, methodST* st2, classSTManager* cstm){
    // for simplicity, return true if both returns primitive types
    if(st1->returnsPrimitive && st2->returnsPrimitive){
        return true;
    }
    if(st1->returnsPrimitive || st2->returnsPrimitive){
        return false;
    }
    
    // for reference type, method1 and method2 can return class or interface, leading to 4 branches
    // special case: if they have equal return type
    if(!strcmp(st1->returnType->type, st2->returnType->type)){
        return true;
    }
    
    classST* class1 = lookupClassST(cstm, st1->returnType->type);
    classST* class2 = lookupClassST(cstm, st2->returnType->type);
    if(!class1 || !class2){
        return false;
    }
    
    // branch1 -- if method1 returns interface while method2 returns class: invalid
    if(class1->isInterface && class2->isClass){
        return false;
    }
    
    // branch2&3 -- if method2 returns interface: trace back implemented interfaces
    if(class1->isInterface && class2->isInterface){
        for(size_t i=0; i < class1->interfacesCount; i++){
            classST* implInter = lookupClassST(cstm, class1->interfacesGenerics[i]->type);
            if(!implInter){
                continue;
            }
            if(!strcmp(implInter->generics->type, st2->returnType->type)){
                return true;
            }
            if(isCompatibleInterface(implInter, class2, cstm)){
                return true;
            }
        }
    return false;
    }
    
    // branch4 -- if both return classes. trace back superclass until Object
    // special case: if method2 returns Object
    if(!strcmp("Object", st2->returnType->type)){
        return true;
    }
    // common case
    classST* superclass = lookupClassST(cstm, class1->superclassGenerics->type);
    // if superclass=NULL, it could be either imcompatible return types, or superclass not included in the registered table.
    while(superclass){
        if(!strcmp(superclass->generics->type, st2->returnType->type)){
            return true;
        }
        superclass = lookupClassST(cstm, superclass->superclassGenerics->type);
    }
    return false;
}
